name: Acceptance Deploy

on:
  schedule:
    - cron: 0 17 * * * # Noon in central time.
  workflow_dispatch: { }

env:
  PROJECT_ID: acceptance-327322

jobs:
  commits:
    # Determine the commits that need to be deployed to each environment.
    name: Determine Commit
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/build-containers/golang:1.17.0
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'main'
      - name: fetch
        run: git fetch --prune --unshallow
      - name: Determine Acceptance Commit
        id: acceptance
        run: echo "::set-output name=acceptance_commit::$(go run github.com/monetr/monetr/tools/releaser --since=-24h)"
    outputs:
      acceptance_commit: "${{ steps.acceptance.outputs.acceptance_commit }}"

  test:
    needs:
      - "commits"
    timeout-minutes: 15
    name: Test
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/build-containers/golang:1.17.0
    env:
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: ""
      POSTGRES_USER: api-testing
      POSTGRES_DB: test-db
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_USER: api-testing
          POSTGRES_DB: test-db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
        with:
          ref: "${{ needs.commits.outputs.acceptance_commit }}"
      - name: Dependencies
        run: make dependencies
      - name: Build
        run: make build
      - name: Setup Schema
        run: make apply-schema-ci
      - name: Test
        run: make test
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        if: always() # always run even if the previous step fails
        with:
          report_paths: '$GITHUB_WORKSPACE/rest-api.xml'
          check_name: 'Go Test Summary'

  pg-test:
    needs:
      - "commits"
    timeout-minutes: 10
    name: PostgreSQL Test
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/pgtest:latest
    env:
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: ""
      POSTGRES_USER: postgres
      POSTGRES_DB: test-db
      POSTGRES_HOST_AUTH_METHOD: trust
    services:
      postgres:
        image: ghcr.io/monetr/pgtest:latest
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_USER: postgres
          POSTGRES_DB: test-db
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
        with:
          ref: "${{ needs.commits.outputs.acceptance_commit }}"
      - name: Test
        run: make pg_test
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        if: failure()
        with:
          report_paths: '/junit.xml'
          check_name: 'PostgreSQL Deployment Test Summary'

  container:
    timeout-minutes: 60
    needs:
      - "commits"
      - "test"
      - "pg-test"
    name: Google Container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: "${{ needs.commits.outputs.acceptance_commit }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Google Artifact Registry
        uses: docker/login-action@v1
        with:
          registry: us-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.ACCEPTANCE_GAR_JSON_KEY }}
      - name: Container Timestamp
        id: timestamp
        run: echo "::set-output name=build_time::$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            REVISION=${{ needs.commits.outputs.acceptance_commit }}
            BUILD_TIME=${{ steps.timestamp.outputs.build_time }}
          push: true
          platforms: "linux/amd64"
          tags: "us-docker.pkg.dev/${{ env.PROJECT_ID }}/monetr-containers/rest-api:${{ needs.commits.outputs.acceptance_commit }}"

  acceptance:
    needs:
      - "commits"
      - "test"
      - "pg-test"
      - "container"
    name: Deploy Acceptance
    runs-on: ubuntu-latest
    steps:
      - uses: chrnorm/deployment-action@releases/v1
        name: Create Acceptance Deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: https://api.monetr.dog
          environment: acceptance
          auto_merge: false
          ref: "${{ needs.commits.outputs.acceptance_commit }}"

  release-acceptance:
    needs:
      - "commits"
      - "test"
      - "pg-test"
      - "container"
    name: Release Acceptance
    runs-on: ubuntu-latest
    container: golang:1.17.1
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'main'
          token: ${{ secrets.PUSH_TOKEN }}
      - name: fetch
        run: git fetch --prune --unshallow
      - name: Push To Acceptance
        run: git push origin $(go run github.com/monetr/monetr/tools/releaser --since=-24h):acceptance
