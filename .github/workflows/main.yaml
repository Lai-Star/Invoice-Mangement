name: GH

on:
  push:
    branches:
      - main

jobs:
  go_dependencies:
    name: Go Dependencies
    runs-on: ubuntu-latest
    container: golang:1.17.3
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-
      - name: Dependencies
        run: make go-dependencies

  ui_dependencies:
    name: UI Dependencies
    runs-on: ubuntu-latest
    container: node:17.0.1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-ui-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-ui-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-ui-
      - name: Dependencies
        run: make ui-dependencies

  build_ui:
    needs:
      - ui_dependencies
    name: Build UI
    runs-on: ubuntu-latest
    container: node:17.0.1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-ui-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-ui-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-ui-
      - name: Build
        run: make build-ui
      - uses: actions/upload-artifact@v2
        with:
          name: '${{ github.sha }}-ui'
          path: '${{ github.workspace }}/pkg/ui/static/'
          retention-days: 7

  build_binary:
    needs:
      - go_dependencies
      - build_ui
    name: Build Binary
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/build-containers/golang:1.17.3
    strategy:
      matrix:
        os:
          - linux
          - darwin
          - windows
        architecture:
          - amd64
          - arm64
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-
      - uses: actions/download-artifact@v2
        name: Download Compiled UI Artifacts
        with:
          name: '${{ github.sha }}-ui'
          path: '${{ github.workspace }}/pkg/ui/static/'
      - name: Build
        run: GOOS=${{ matrix.os }} GOARCH=${{ matrix.architecture }} make build
      - uses: actions/upload-artifact@v2
        with:
          name: '${{ github.sha }}-binary-${{ matrix.os }}-${{ matrix.architecture }}'
          path: |
            ${{ github.workspace }}/bin/monetr
            ${{ github.workspace }}/bin/monetr.exe
          if-no-files-found: ignore
          retention-days: 7

  go_test:
    needs:
      - go_dependencies
    name: Test Go
    runs-on: ubuntu-latest
    container: golang:1.17.3
    env:
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: ""
      POSTGRES_USER: api-testing
      POSTGRES_DB: test-db
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_USER: api-testing
          POSTGRES_DB: test-db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-
      - name: Test
        run: make test-go
      - uses: actions/upload-artifact@v2
        name: Upload Test JUnit Artifacts
        if: always()
        with:
          name: '${{ github.sha }}-rest-api-junit'
          path: '${{ github.workspace }}/rest-api-junit.xml'
          retention-days: 7
      - name: Annotate tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.0
        with:
          test-results: '${{ github.workspace }}/rest-api-tests.json'
      - uses: actions/upload-artifact@v2
        name: Upload Go Test Coverage Artifacts
        if: always()
        with:
          name: '${{ github.sha }}-go-coverage'
          path: '${{ github.workspace }}/coverage.txt'
          retention-days: 1

  ui_test:
    needs:
      - ui_dependencies
    name: Test UI
    runs-on: ubuntu-latest
    container: node:17.0.1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-ui-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-ui-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-ui-
      - name: Test
        run: make test-ui
      - uses: actions/upload-artifact@v2
        name: Upload UI Test Coverage Artifacts
        if: always()
        with:
          name: '${{ github.sha }}-ui-coverage'
          path: '${{ github.workspace }}/coverage/clover.xml'
          retention-days: 1

  codecov:
    name: CodeCov
    needs:
      - go_test
      - ui_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        name: Download Go Coverage Artifacts
        with:
          name: '${{ github.sha }}-go-coverage'
          path: '${{ github.workspace }}/coverage'
      - uses: actions/download-artifact@v2
        name: Download UI Coverage Artifacts
        with:
          name: '${{ github.sha }}-ui-coverage'
          path: '${{ github.workspace }}/coverage'
      - name: CodeCov
        if: always()
        uses: codecov/codecov-action@v2
        with:
          files: '${{ github.workspace }}/coverage/clover.xml,${{ github.workspace }}/coverage/coverage.txt'
          name: monetr

  junit:
    needs:
      - go_test
    name: JUnit Report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        name: Download Go JUnit Artifacts
        with:
          name: '${{ github.sha }}-rest-api-junit'
          path: '${{ github.workspace }}/junit'
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        if: always() # always run even if the previous step fails
        with:
          report_paths: '${{ github.workspace }}/**/*-junit.xml'
          check_name: 'Test Summary'

  docs-generate:
    needs:
      - go_dependencies
      - ui_dependencies
    name: Generate Documentation
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/build-containers/ubuntu:20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-
      - uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-ui-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-ui-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-ui-
      - name: Generate Documentation Static Site
        run: make docs-static
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@4.1.6
        with:
          branch: docs.monetr.dev
          folder: docs

  buildah:
    needs:
      - "ui_dependencies"
      - "build_ui"
    name: Container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        name: Download Compiled UI Artifacts
        with:
          name: '${{ github.sha }}-ui'
          path: '${{ github.workspace }}/pkg/ui/static/'
      - name: Build
        run: |
          sudo apt-get update && sudo apt-get -y install qemu-user-static
          make container
