# This workflow rule might need to be tweaked once we are using bors to regulate builds. I think it will need another
# exception for staging branches that bors creates.
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /(.tmp)/'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "external_pull_request_event"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "main"'
      when: never

stages:
  - Dependencies
  - Build
  - Test
  - Schema Preflight
  - Schema
  - Documentation
  - Coverage
  - Build Container
  - Publish Container
  - Prepare Staging
  - Deploy Staging

variables:
  GO111MODULE: 'on'
  GOFLAGS: '-mod=vendor'

Go Dependencies:
  needs: [ ]
  stage: Dependencies
  image: containers.monetr.dev/golang:1.16.2
  tags:
    - k8s:shared
    - arch:amd64
  script:
    - go mod vendor
  cache:
    key: go-${CI_COMMIT_SHA}
    paths:
      - ./vendor
    policy: push

JS Dependencies:
  needs: [ ]
  stage: Dependencies
  image: containers.monetr.dev/node:15.12.0-buster
  tags:
    - k8s:shared
    - arch:amd64
  script:
    - yarn install --no-lockfile # Will use my npm proxy/registry allowing for faster pulling of dependencies.
  cache:
    key: js-${CI_COMMIT_SHA}
    paths:
      - ./node_modules
    policy: push

Binary:
  needs:
    - "Go Dependencies"
  stage: Build
  image: containers.monetr.dev/golang:1.16.2
  tags:
    - k8s:shared
    - arch:amd64
  script:
    - go build -o ./bin/rest-api-${GOARCH} github.com/monetrapp/rest-api/cmd/api
  cache:
    key: go-${CI_COMMIT_SHA}
    paths:
      - ./bin
      - ./vendor
    policy: pull-push

Database:
  needs: [ ]
  stage: Build
  image: containers.monetr.dev/kaniko-ci:latest
  variables:
    VAULT_AUTH_ROLE: harder-rest-api-shorty
  secrets:
    DOCKER_CONFIG_JSON:
      vault: containers/shorty/docker-config.json@pipelines/harderthanitneedstobe.com
  tags:
    - k8s:shared
    - arch:amd64
  before_script:
    - ln -s $DOCKER_CONFIG_JSON /kaniko/.docker/config.json
  script:
    - |
      kaniko --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile.database \
        --destination shorty.containers.monetr.dev/database-schema-changes:$CI_COMMIT_SHA

Go Tests:
  needs:
    - "Go Dependencies"
  services:
    - name: containers.monetr.dev/postgres:13
      alias: postgres
  variables:
    POSTGRES_HOST: postgres
    POSTGRES_PASSWORD: ""
    POSTGRES_USER: api-testing
    POSTGRES_DB: test-db
    POSTGRES_HOST_AUTH_METHOD: trust
  stage: Test
  image: containers.monetr.dev/golang:1.16.2
  tags:
    - k8s:shared
    - arch:amd64
  before_script:
    - apt-get update
    - apt-get install -y postgresql-client
    - sleep 5
    - |
      for file in $CI_PROJECT_DIR/schema/*; do
        psql -q -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -f $file
      done
  script:
    - make test
  cache:
    key: go-${CI_COMMIT_SHA}
    paths:
      - ./vendor
    policy: pull
  artifacts:
    name: "$CI_COMMIT_SHA-test-coverage"
    paths:
      - ./coverage.txt
    expire_in: 7 days

PostgreSQL Tests:
  needs: [ ]
  stage: Test
  services:
    - name: containers.monetr.dev/pgtest:latest
      alias: postgres
  image:
    name: containers.monetr.dev/pgtest:latest
    entrypoint: [ "" ]
  tags:
    - k8s:shared
    - arch:amd64
  variables:
    POSTGRES_HOST: postgres
    POSTGRES_PASSWORD: ""
    POSTGRES_USER: postgres
    POSTGRES_DB: test-db
    POSTGRES_HOST_AUTH_METHOD: trust
  script:
    - sleep 5
    - |
      for file in $CI_PROJECT_DIR/schema/*; do
        psql -q -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -f $file
      done
    - psql -q -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -c "CREATE EXTENSION pgtap;"
    - pg_prove -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -f ./tests/pg/*.sql

Diff Schema PGDiff:
  needs:
    - "Database"
  stage: Schema
  services:
    - name: shorty.containers.monetr.dev/database-schema-changes:$CI_COMMIT_SHA
      alias: new
    - name: containers.monetr.dev/database-schema-base:latest
      alias: current
  image: containers.monetr.dev/golang:1.16.2
  tags:
    - k8s:shared
    - arch:amd64
  variables:
    POSTGRES_PASSWORD: "password"
    POSTGRES_USER: postgres
    POSTGRES_DB: test-db
    POSTGRES_HOST_AUTH_METHOD: trust
    GOFLAGS: '' # Clear this flag for this one.
  script:
    - go get github.com/joncrlsn/pgdiff
    - go build -o /usr/local/bin/pgdiff github.com/joncrlsn/pgdiff
    - |
      pgdiff \
        -U $POSTGRES_USER -H current -D $POSTGRES_DB -O "sslmode=disable" -W $POSTGRES_PASSWORD \
        -u $POSTGRES_USER -h new -d $POSTGRES_DB -o "sslmode=disable" -w $POSTGRES_PASSWORD ALL

Diff Schema Migra:
  allow_failure: true
  needs:
    - "Database"
  stage: Schema
  services:
    - name: shorty.containers.monetr.dev/database-schema-changes:$CI_COMMIT_SHA
      alias: new
    - name: containers.monetr.dev/database-schema-base:latest
      alias: current
  image: containers.harderthanitneedstobe.com/ubuntu:20.04
  tags:
    - k8s:shared
    - arch:amd64
  variables:
    POSTGRES_PASSWORD: "password"
    POSTGRES_USER: postgres
    POSTGRES_DB: test-db
    POSTGRES_HOST_AUTH_METHOD: trust
    GOFLAGS: '' # Clear this flag for this one.
  script:
    - apt-get update
    - apt-get install -y python3 python3-pip
    - pip3 install migra[pg]

Yeet Coverage:
  needs:
    - "Go Tests"
  environment:
    name: DeepSource
  stage: Coverage
  image: ghcr.io/harderthanitneedstobe/deepsource:v0.1.7-9-gff81369
  tags:
    - k8s:shared
    - arch:amd64
  script:
    - export DEEPSOURCE_DSN=$K8S_SECRET_DEEPSOURCE_DSN
    - deepsource report --analyzer test-coverage --key go --value-file ./coverage.txt
  dependencies:
    - "Go Tests"

Documentation:
  allow_failure: true
  needs:
    - "Go Dependencies"
  stage: Documentation
  image: containers.harderthanitneedstobe.com/ubuntu:20.04
  tags:
    - k8s:shared
    - arch:amd64
  before_script:
    - mkdir -p /home || true
    - cd /home
    - GO111MODULE=off GOFLAGS="" go get github.com/swaggo/swag/cmd/swag
    - GO111MODULE=off GOFLAGS="" go build -o /usr/local/bin/swag github.com/swaggo/swag/cmd/swag
    - cd $CI_PROJECT_DIR
    - export PATH=$PATH:$CI_PROJECT_DIR/node_modules/.bin
  script:
    - make docs
    - redoc-cli bundle
  cache:
    key: js-${CI_COMMIT_SHA}
    paths:
      - ./node_modules
    policy: pull
  artifacts:
    name: "$CI_COMMIT_SHA-documentation"
    paths:
      - ./redoc-static.html
      - ./docs
    expire_in: 7 days

Kaniko - REST API:
  needs:
    - "Binary"
    - "Go Dependencies"
  stage: Build Container
  image: containers.harderthanitneedstobe.com/kaniko-ci:latest
  tags:
    - k8s:shared
    - arch:amd64
  script:
    - kaniko --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --no-push

Kaniko - Work UI:
  allow_failure: true
  needs:
    - "Go Dependencies"
  stage: Build Container
  image: containers.harderthanitneedstobe.com/kaniko-ci:latest
  tags:
    - k8s:shared
    - arch:amd64
  script:
    - kaniko --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile.work --no-push

Publish - REST API:
  needs:
    - "Kaniko - REST API"
    - "Go Tests"
  variables:
    VAULT_AUTH_ROLE: harder-rest-api
  secrets:
    DOCKER_CONFIG_JSON:
      vault: containers/push/docker-config.json@pipelines/harderthanitneedstobe.com
  stage: Publish Container
  only:
    refs:
      - main
  image: containers.harderthanitneedstobe.com/kaniko-ci:latest
  tags:
    - k8s:shared
    - arch:amd64
  before_script:
    - ln -s $DOCKER_CONFIG_JSON /kaniko/.docker/config.json
  script:
    - |
      kaniko --context $CI_PROJECT_DIR \
        --build-arg $CI_COMMIT_SHA \
        --dockerfile $CI_PROJECT_DIR/Dockerfile \
        --destination ghcr.io/harderthanitneedstobe/rest-api:latest \
        --destination ghcr.io/harderthanitneedstobe/rest-api:$CI_COMMIT_SHORT_SHA  \
        --destination containers.harderthanitneedstobe.com/rest-api:latest \
        --destination containers.harderthanitneedstobe.com/rest-api:$CI_COMMIT_SHORT_SHA

Publish - Work UI:
  needs:
    - "Kaniko - Work UI"
  variables:
    VAULT_AUTH_ROLE: harder-rest-api
  secrets:
    DOCKER_CONFIG_JSON:
      vault: containers/push/docker-config.json@pipelines/harderthanitneedstobe.com
  stage: Publish Container
  only:
    refs:
      - main
  image: containers.harderthanitneedstobe.com/kaniko-ci:latest
  tags:
    - k8s:shared
    - arch:amd64
  before_script:
    - ln -s $DOCKER_CONFIG_JSON /kaniko/.docker/config.json
  script:
    - |
      kaniko --context $CI_PROJECT_DIR \
        --dockerfile $CI_PROJECT_DIR/Dockerfile.work \
        --destination ghcr.io/harderthanitneedstobe/work-ui:latest \
        --destination containers.harderthanitneedstobe.com/work-ui:latest

Publish - Database Schema:
  needs:
    - "Database"
  variables:
    VAULT_AUTH_ROLE: harder-rest-api
  secrets:
    DOCKER_CONFIG_JSON:
      vault: containers/push/docker-config.json@pipelines/harderthanitneedstobe.com
  stage: Publish Container
  only:
    refs:
      - main
  image: containers.harderthanitneedstobe.com/kaniko-ci:latest
  tags:
    - k8s:shared
    - arch:amd64
  before_script:
    - ln -s $DOCKER_CONFIG_JSON /kaniko/.docker/config.json
  script:
    - |
      kaniko --context $CI_PROJECT_DIR \
        --dockerfile $CI_PROJECT_DIR/Dockerfile.database \
        --destination containers.harderthanitneedstobe.com/database-schema-base:$CI_COMMIT_SHA \
        --destination containers.harderthanitneedstobe.com/database-schema-base:latest

Staging Dry Run - Main:
  when: manual
  stage: Prepare Staging
  needs:
    - "PostgreSQL Tests"
    - "Publish - REST API"
  only:
    refs:
      - main
  tags:
    - k8s:admin
    - arch:amd64
  environment:
    name: staging
    url: https://api.staging.harderthanitneedstobe.com
    action: prepare
  image: containers.harderthanitneedstobe.com/ubuntu:20.04
  script:
    - echo "test"

Staging Deploy - Main:
  when: manual
  stage: Deploy Staging
  only:
    refs:
      - main
  tags:
    - k8s:admin
    - arch:amd64
  environment:
    name: staging
    url: https://api.staging.harderthanitneedstobe.com
    action: start
  image: containers.harderthanitneedstobe.com/ubuntu:20.04
  script:
    - echo "test"
