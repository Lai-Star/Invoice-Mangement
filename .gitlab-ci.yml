# This workflow rule might need to be tweaked once we are using bors to regulate builds. I think it will need another
# exception for staging branches that bors creates.
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /(.tmp)/'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "external_pull_request_event"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "main"'
      when: never

stages:
  - Dependencies
  - Build
  - Test
  - Documentation
  - Coverage
  - Publish Container
  - Prepare
  - Dry Run

variables:
  GO111MODULE: 'on'
  GOFLAGS: '-mod=vendor'

Go Dependencies:
  needs: [ ]
  stage: Dependencies
  image: containers.monetr.dev/golang:1.16.3
  tags:
    - k8s:shared
    - arch:amd64
  script:
    - go mod vendor
  cache:
    key: go-${CI_COMMIT_SHA}
    paths:
      - $CI_PROJECT_DIR/vendor
    policy: push

JS Dependencies:
  needs: [ ]
  stage: Dependencies
  image: containers.monetr.dev/node:15.14.0-buster
  tags:
    - k8s:shared
    - arch:amd64
  script:
    - yarn install --no-lockfile # Will use my npm proxy/registry allowing for faster pulling of dependencies.
  cache:
    key: js-${CI_COMMIT_SHA}
    paths:
      - $CI_PROJECT_DIR/node_modules
    policy: push

Binary:
  needs:
    - "Go Dependencies"
  stage: Build
  image: containers.monetr.dev/golang:1.16.3
  tags:
    - k8s:shared
    - arch:amd64
  script:
    - make build
  cache:
    key: go-${CI_COMMIT_SHA}
    paths:
      - $CI_PROJECT_DIR/bin
      - $CI_PROJECT_DIR/vendor
    policy: pull-push

Go Tests:
  needs:
    - "Go Dependencies"
  services:
    - name: containers.monetr.dev/postgres:13
      alias: postgres
  variables:
    POSTGRES_HOST: postgres
    POSTGRES_PASSWORD: ""
    POSTGRES_USER: api-testing
    POSTGRES_DB: test-db
    POSTGRES_HOST_AUTH_METHOD: trust
  stage: Test
  image: containers.monetr.dev/golang:1.16.3
  tags:
    - k8s:shared
    - arch:amd64
  before_script:
    - make apply-schema-ci
  script:
    - make test
  cache:
    key: go-${CI_COMMIT_SHA}
    paths:
      - $CI_PROJECT_DIR/bin
      - $CI_PROJECT_DIR/vendor
    policy: pull
  artifacts:
    name: "$CI_COMMIT_SHA-test-coverage"
    paths:
      - ./coverage.txt
    expire_in: 7 days

PostgreSQL Tests:
  needs: [ ]
  stage: Test
  services:
    - name: containers.monetr.dev/pgtest:latest
      alias: postgres
  image:
    name: containers.monetr.dev/pgtest:latest
    entrypoint: [ "" ]
  tags:
    - k8s:shared
    - arch:amd64
  variables:
    POSTGRES_HOST: postgres
    POSTGRES_PASSWORD: ""
    POSTGRES_USER: postgres
    POSTGRES_DB: test-db
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - sleep 5
  script:
    - make pg_test

Yeet Coverage:
  needs:
    - "Go Tests"
  environment:
    name: DeepSource
  stage: Coverage
  image: ghcr.io/monetrapp/deepsource:latest
  tags:
    - k8s:shared
    - arch:amd64
  script:
    - export DEEPSOURCE_DSN=$K8S_SECRET_DEEPSOURCE_DSN
    - deepsource report --analyzer test-coverage --key go --value-file ./coverage.txt
  dependencies:
    - "Go Tests"

Documentation:
  needs:
    - "JS Dependencies"
  stage: Documentation
  image: containers.monetr.dev/ubuntu:20.04
  tags:
    - k8s:shared
    - arch:amd64
  before_script:
    - export PATH=$PATH:$CI_PROJECT_DIR/node_modules/.bin
  script:
    - make dependencies
    - go mod vendor
    - make docs
    - redoc-cli bundle $CI_PROJECT_DIR/docs/swagger.yaml
  cache:
    key: js-${CI_COMMIT_SHA}
    paths:
      - $CI_PROJECT_DIR/node_modules
    policy: pull
  artifacts:
    name: "$CI_COMMIT_SHA-documentation"
    paths:
      - $CI_PROJECT_DIR/redoc-static.html
      - $CI_PROJECT_DIR/docs
    expire_in: 7 days

.docker_template: &docker_template
  only:
    refs:
      - main
  image: proxy.monetr.dev/docker:19.03.13
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: proxy.monetr.dev/docker:19.03.13-dind
      command: [ "--registry-mirror", "https://proxy.monetr.dev" ]
      alias: docker
  tags:
    - k8s:shared-docker
    - arch:amd64
  before_script:
    - for i in 1 2 3 4 5; do (docker info > /dev/null 2>&1) && break || echo "Waiting for docker to start..." && sleep 15; done

REST API:
  needs:
    - "Go Tests"
  stage: Publish Container
  <<: [ *docker_template ]
  script:
    - docker build -t containers.monetr.dev/rest-api:$CI_COMMIT_SHORT_SHA -f Dockerfile .

Generate - Staging:
  needs: []
  stage: Prepare
  image: containers.monetr.dev/ubuntu:20.04
  tags:
    - k8s:shared
    - arch:amd64
  variables:
    GOFLAGS: ''
    ENVIRONMENT: Staging
  script:
    - make generate ENVIRONMENT=${ENVIRONMENT}
  cache:
    key: k8s-${CI_COMMIT_SHA}-${ENVIRONMENT}
    paths:
      - $CI_PROJECT_DIR/generated/${ENVIRONMENT}
    policy: push
  artifacts:
    name: "k8s-${CI_COMMIT_SHA}-${ENVIRONMENT}"
    paths:
      - $CI_PROJECT_DIR/generated
    expire_in: 7 days

Dry - Staging:
  only:
    refs:
      - main
  environment:
    name: Staging
    url: https://api.staging.monetr.dev
    deployment_tier: staging
    action: prepare
    kubernetes:
      namespace: monetr-staging
  needs:
    - "Generate - Staging"
    - "REST API"
  stage: Dry Run
  image: containers.monetr.dev/ubuntu:20.04
  tags:
    - monetr:staging
  variables:
    GOFLAGS: ''
    ENVIRONMENT: Staging
  script:
    - make dry ENVIRONMENT=${ENVIRONMENT}
  cache:
    key: k8s-${CI_COMMIT_SHA}-${ENVIRONMENT}
    paths:
      - $CI_PROJECT_DIR/generated/${ENVIRONMENT}
    policy: pull
