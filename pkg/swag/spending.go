package swag

import (
	"github.com/monetrapp/rest-api/pkg/models"
	"time"
)

type UpdateSpendingRequest struct {
	// The spending Id of the goal or expense that you are updating.
	SpendingId uint64 `json:"spendingId" example:"4364"`
	// The desired funding schedule of the spending. Changing this will trigger a recalculation of the spending object.
	FundingScheduleId uint64 `json:"fundingScheduleId" example:"8539"`
	// Human friendly name of the spending object. Something like "Amazon Prime". But can be anything.
	Name string `json:"name" example:"Amazon Prime"`
	// Currently used as a description of the recurrence rule so that it does not need to be "generated" with each
	// pattern. This is not intended to be used by the end user and is generated by the UI when the spending object is
	// created or updated. However it can be modified if you were to send this request manually. It has no side affects,
	// it is simply used to better display data to the end user at this time.
	Description string `json:"description" example:"1st of every month"`
	// How much the spending object should allocate by the next recurrence date. For goals this target is reached once
	// and is considered complete, even if part of the total amount has been spent. For expenses this amount is
	// attempted to be allocated before the recurrence date regardless of spending. This means that even if a
	// transaction is spent from this spending object the allocation system will still allocate more funds to this
	// expense if the transaction was spent before it is technically due AND the funding schedule occurs before the
	// specified next recurrence date. Changing this amount will recalculate contributions to this spending object.
	TargetAmount int64 `json:"targetAmount" example:"1395"`
	// Recurrence rule telling the budgeting system how often this expense should be used. This helps the budgeting
	// system recalculate the next recurrence date each time an expense's recurrence date is reached. More information
	// about the format of the rule can be found here: https://tools.ietf.org/html/rfc5545
	// Note: These rules should be provided with the `RRULE:` prefix omitted if the tool you are using to generate the
	// rule strings include it. These rules are parsed using this library: https://github.com/teambition/rrule-go
	// Changing this rule would recalculate contributions to this spending object.
	RecurrenceRule *models.Rule `json:"recurrenceRule" swaggertype:"string" example:"FREQ=MONTHLY;BYMONTHDAY=1"`
	// The next time this expense or goal is due. For expenses this date is recalculated each time this date passes.
	// For goals this date is somewhat static. It can be modified but is not automatically recalculated once it is
	// reached. Changing this date would recalculate contributions to this spending object. These dates should be
	// provided in RFC3339 format with the timezone of the client included. The timezone is important as its used to
	// calculate the next time this expense recurs.
	NextRecurrence time.Time `json:"nextRecurrence" example:"2021-05-01T00:00:00-05:00"`
}
